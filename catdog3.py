# -*- coding: utf-8 -*-
"""catdog3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HTDiKSo5jBSi_EKngBmXb-BhJ9rWQdqw
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install matplotlib-venn

!apt-get -qq install -y libfluidsynth1

!apt-get -qq install -y libarchive-dev && pip install -U libarchive
import libarchive

!apt-get -qq install -y graphviz && pip install pydot
import pydot

!pip install cartopy
import cartopy

import tensorflow as tf
print(tf.__version__)

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext tensorboard

# Commented out IPython magic to ensure Python compatibility.
import tensorflow.compat.v1 as tf
from tensorflow.keras.callbacks import TensorBoard
import datetime
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,Activation,Flatten,Conv2D,MaxPooling2D
import pickle
import time

NAME = "Cats-vs-Dogs-cnn-64x2-{}".format(int(time.time()))
tensorboard = TensorBoard(log_dir='logs/{}'.format(NAME))

gpu_options = tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction = 0.333)
sess = tf.compat.v1.Session(config = tf.compat.v1.ConfigProto(gpu_options=gpu_options))

pickle_in = open("/content/drive/MyDrive/Colab Notebooks/X.pickle","rb")
X = pickle.load(pickle_in)

pickle_in = open("/content/drive/MyDrive/Colab Notebooks/y.pickle","rb")
y = pickle.load(pickle_in)


y_new = np.array(y)

print(X.size)
print(y_new.size)


X=X/255.0


model = Sequential()

model.add( Conv2D(64,(3,3), input_shape = X.shape[1:]) )#64units,windowsize,inputshape
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size= (2,2)))

model.add(Conv2D(64,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size= (2,2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation("relu"))

model.add(Dense(1))#output
model.add(Activation('sigmoid'))

model.compile(loss = "binary_crossentropy",
              optimizer = "adam",
              metrics = ['accuracy'])



model.fit(X,y_new,batch_size=10,epochs = 3 ,validation_split=0.1,callbacks=[tensorboard])
# %tensorboard --logdir logs